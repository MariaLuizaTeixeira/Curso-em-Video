POO - programação orientada a objetos
objetivo - aproximar o mundo digital do mundo real
objeto
    coisa material ou abstrata que pode ser percebida pelos sentidos e descrita por meio das suas características, comportamentos e estado atual; 
    instância de uma classe
classe
    modelo do objeto
    coisas que eu tenho (atributos)
    coisas que eu faço (métodos)
    como eu estou agora (estado)
    define os atributos e métodos comuns que serão compartilhados por um objeto
instanciar - gerar objeto através da classe
abstração - considerar quais serão os atributos da classe
LMU
    linguagem de modelagem unificada; 
    diagrama de classes: toda classe é um retângulo;
modificadores de visibilidade - indicam o nível de acesso aos componentes internos de uma classe
    + - público: para a classe atual e todas as outras classes;
    - - privado: para a classe atual (não dá para definir atributos privados da maneira tradicional)
    # - protegido: para a classe atual e suas sub-classes
    na chamada só dá para mexer em atributos públicos
se um atributo é privado, mas ele é citado em um método público, o método pode funcionar pois a é chamada for na mesma classe
getters e setters são sempre públicos
método construtor tem sempre o mesmo nome da classe
EHP - encapsulamento, herança, polimorfismo 
encapsulamento
    ocultar partes independentes da implementação, permitindo construir partes invsíveis ao mundo exterior
    torna mudanças invisiveis
    facilita reutilização do código
    reduz efeito colaterais
interface 
    comunicação com o meio externo
    só tem métodos e só os nomes delas, não são desenvolvidos (métodos abstratos)
    todos os métodos definidos na interface são públicos
sempre que é boolean, o get vira is
relacionamento entre classes
herança
    permite basear uma nova classe na definição de uma outra classe previamente existente
    será aplicada tanto para características, quando para comportamentos
    herança de implementação - filho que pega características da mãe e sem impementar novas
    herança para diferença - filho que pega características da mãe e implementa novas
navegação pela herança
    raiz - classe que não é subclasse de nenhuma
    folha - classe que não é superclasse que ninguém
    descendente - neta
    ancestral - vó
    especialização - ver de cima para baixo
    generalização - ver de baixo para cima
classe abstrata - não pode gerar objetos, ela é apenas progenitora
método abstrato - declarado, mas não implementado na progenitora
classe final = não pode ser herdada por outras classes, obrigatoriamente folha
método final - não pode ser sobrescrito pelas suas sub-classes, obrigatoriamente herdado
polimorfismo
    poli - muito
    morfo - formas
    permite que um mesmo nome represente vários comportamentos diferentes
    assinatura do método - quantidade e tipos dos parâmetros (retorno não conta e a ordem dos tipos faz diferença)
    polimorfismo de sorbeposição - sobrepõe da superclasse nas subclasses com a mesma assinatura com resultados diferentes
    polimorfismo de sobrecarga - métodos com o mesmo nome, assinaturas diferentes e na mesma classe
lembrete! - quando o método for abstrato, apenas declarar, não por chaves ({})
    